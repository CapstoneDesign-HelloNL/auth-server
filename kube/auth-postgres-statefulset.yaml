apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.22.0 (955b78124)
  name: auth-postgres-hs
  labels: 
    postgres: auth
spec:
  ports:
    - port: 5555
      name: hs-port
  clusterIP: None
  selector:
    postgres: auth
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: auth-postgres-pdb
spec:
  selector:
    matchLabels:
      postgres: auth
  maxUnavailable: 1
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.22.0 (955b78124)
  # creationTimestamp: null
  labels:
    io.kompose.service: auth-postgres
    postgres: auth
  name: auth-postgres
spec:
  selector:
    matchLabels:
      io.kompose.service: auth-postgres
      postgres: auth
  serviceName: auth-postgres-hs
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  # podManagementPolicy: OrderedReady
  # strategy:
  #   type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.22.0 (955b78124)
      # creationTimestamp: null
      labels:
        # io.kompose.network/auth: "true"
        # io.kompose.network/message-q: "true"
        postgres: auth
        io.kompose.service: auth-postgres
    spec:
      containers:
        - env:
            - name: POSTGRES_DATABASE
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_DATABASE
                  name: db-auth-docker-env
            - name: POSTGRES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_PASSWORD
                  name: db-auth-docker-env
            - name: POSTGRES_USERNAME
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_USERNAME
                  name: db-auth-docker-env
          image: postgres
          name: auth-postgres
          ports:
            - containerPort: 5432
            - containerPort: 5555
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: auth-data
      restartPolicy: Always
      volumes:
        - name: auth-data
          persistentVolumeClaim:
            claimName: auth-data
status:
  replicas: 1
